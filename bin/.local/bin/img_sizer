#!/usr/bin/env node

// inspired by Tom MacWright's approach with: https://github.com/tmcw/bespoke

import fs from "fs/promises";
import path from "path";
import sharp from "sharp";
import prettyBytes from "pretty-bytes";

// all of the sizes and formats to generat for each image
const sizes = [640, 1280, 2880];
const formats = ["jpg", "webp", "avif"];

async function main(srcImagePath, outputDir) {
	console.log(`Generating images for ${srcImagePath}`);
	const ext = path.extname(srcImagePath);
	const name = path.basename(srcImagePath, ext);
	const input = await fs.readFile(srcImagePath);
	// first, generate an image at the original size in jpeg format, with no metadata
	const originalName = `${name}_original.jpg`;
	const originalPath = path.join(outputDir, originalName);
	await sharp(input).rotate().toFile(originalPath);
	const originalFile = await fs.readFile(originalPath);
	console.log(`Format: $jpg, Res: original, Size: ${prettyBytes(originalFile.byteLength)}`);
	// loop through all sizes and formats and generate each one
	for (let size of sizes) {
		for (let format of formats) {
			const outputName = `${name}_${size}.${format}`;
			const outputPath = path.join(outputDir, outputName);
			await sharp(input).rotate().resize(size).toFile(outputPath);
			const outputFile = await fs.readFile(outputPath);
			console.log(`Format: ${format}, Res: ${size}, Size: ${prettyBytes(outputFile.byteLength)}`);
		}
	}
}

if (process.argv.length < 4) {
	console.error("not enough arguments");
	process.exit(1);
}

main(process.argv[2], process.argv[3]);
